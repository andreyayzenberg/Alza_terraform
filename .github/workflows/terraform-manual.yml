name: 'Terraform Manual Actions'

on:
  workflow_dispatch:
    inputs:
      action:
        type: choice
        description: 'Select Action to Perform'
        required: true
        options:
          - create
          - destroy
          - force-unlock

permissions:
  contents: write
  pull-requests: write

env:
  TF_LOG: INFO
  TF_HTTP_USERNAME: "x-access-token"
  TF_HTTP_PASSWORD: ${{ secrets.TF_GITHUB_TOKEN }}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.12.1"

      - name: Configure Backend
        run: |
          REPO_PATH="${{ github.repository }}"
          sed -i "s|OWNER/REPO|$REPO_PATH|g" backend.tf
          sed -i "s|GITHUB_TOKEN|${{ secrets.TF_GITHUB_TOKEN }}|g" backend.tf

      - name: Initialize Empty State
        if: github.event.inputs.action == 'create'
        run: |
          # Create a properly formatted empty state file
          STATE_CONTENT=$(cat << 'EOF'
          {
            "version": 4,
            "terraform_version": "1.12.1",
            "serial": 1,
            "lineage": "$(uuidgen)",
            "outputs": {},
            "resources": [],
            "check_results": null
          }
          EOF
          )

          # Check if state file exists
          STATE_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.TF_GITHUB_TOKEN }}" \
                              -H "Accept: application/vnd.github.v3+json" \
                              "https://api.github.com/repos/${{ github.repository }}/contents/terraform.tfstate")
          
          if echo "$STATE_RESPONSE" | jq -e '.sha' > /dev/null; then
            # File exists, get its SHA
            SHA=$(echo "$STATE_RESPONSE" | jq -r '.sha')
            echo "Updating existing state file..."
          else
            echo "Creating new state file..."
            SHA=""
          fi

          # Prepare the request body
          REQUEST_BODY=$(jq -n \
            --arg content "$(echo "$STATE_CONTENT" | base64 -w 0)" \
            --arg message "Initialize/Update Terraform state" \
            --arg sha "$SHA" \
            '{
              message: $message,
              content: $content,
              sha: (if $sha == "" then null else $sha end)
            }')

          # Create/Update the state file in the repository
          curl -X PUT \
            -H "Authorization: token ${{ secrets.TF_GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            "https://api.github.com/repos/${{ github.repository }}/contents/terraform.tfstate" \
            -d "$REQUEST_BODY"
        env:
          GITHUB_TOKEN: ${{ secrets.TF_GITHUB_TOKEN }}

      - name: Force Unlock State
        if: github.event.inputs.action == 'force-unlock'
        run: |
          terraform init -lock=false
          # Try to get the lock ID
          LOCK_ID=$(curl -s -H "Authorization: token ${{ secrets.TF_GITHUB_TOKEN }}" \
                        -H "Accept: application/vnd.github.v3+json" \
                        "https://api.github.com/repos/${{ github.repository }}/contents/.terraform.tfstate.lock.info" | \
                    jq -r '.content' | base64 --decode 2>/dev/null | jq -r '.ID' || echo "")
          
          if [ ! -z "$LOCK_ID" ]; then
            echo "Found lock with ID: $LOCK_ID"
            terraform force-unlock -force "$LOCK_ID"
          else
            echo "No lock found or unable to determine lock ID"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.TF_GITHUB_TOKEN }}
          TF_VAR_github_token: ${{ secrets.TF_GITHUB_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform init -lock=false
        env:
          GITHUB_TOKEN: ${{ secrets.TF_GITHUB_TOKEN }}

      - name: Terraform Plan Create
        if: github.event.inputs.action == 'create'
        id: plan
        run: terraform plan -lock=false -no-color -input=false
        env:
          GITHUB_TOKEN: ${{ secrets.TF_GITHUB_TOKEN }}
          TF_VAR_github_token: ${{ secrets.TF_GITHUB_TOKEN }}
          TF_VAR_github_owner: ${{ github.repository_owner }}

      - name: Terraform Plan Destroy
        if: github.event.inputs.action == 'destroy'
        id: plan-destroy
        run: terraform plan -destroy -lock=false -no-color -input=false
        env:
          GITHUB_TOKEN: ${{ secrets.TF_GITHUB_TOKEN }}
          TF_VAR_github_token: ${{ secrets.TF_GITHUB_TOKEN }}
          TF_VAR_github_owner: ${{ github.repository_owner }}

      - name: Terraform Apply
        if: github.event.inputs.action == 'create'
        run: terraform apply -lock=false -auto-approve -input=false
        env:
          GITHUB_TOKEN: ${{ secrets.TF_GITHUB_TOKEN }}
          TF_VAR_github_token: ${{ secrets.TF_GITHUB_TOKEN }}
          TF_VAR_github_owner: ${{ github.repository_owner }}

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: terraform destroy -lock=false -auto-approve -input=false
        env:
          GITHUB_TOKEN: ${{ secrets.TF_GITHUB_TOKEN }}
          TF_VAR_github_token: ${{ secrets.TF_GITHUB_TOKEN }}
          TF_VAR_github_owner: ${{ github.repository_owner }}

      - name: Verify State File
        if: always()
        run: |
          echo "Checking terraform.tfstate in repository..."
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/repos/${{ github.repository }}/contents/terraform.tfstate | \
          jq -r '.sha // empty' && echo "✅ State file found!" || echo "❌ State file not found" 