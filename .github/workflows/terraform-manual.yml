name: 'Terraform Manual Actions'

on:
  workflow_dispatch:
    inputs:
      action:
        type: choice
        description: 'Select Action to Perform'
        required: true
        options:
          - create
          - destroy
          - force-unlock

permissions:
  contents: write
  pull-requests: write

env:
  TF_LOG: INFO

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.12.1"

      - name: Read Previous State Location
        id: state-location
        run: |
          if [ -f "terraform.state.link" ]; then
            echo "previous_run_id=$(grep 'run_id:' terraform.state.link | cut -d' ' -f2)" >> $GITHUB_OUTPUT
            echo "previous_workflow=$(grep 'workflow_id:' terraform.state.link | cut -d' ' -f2)" >> $GITHUB_OUTPUT
          fi

      - name: Download Previous State
        if: steps.state-location.outputs.previous_run_id != ''
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: terraform-state
          path: .
          run-id: ${{ steps.state-location.outputs.previous_run_id }}

      - name: Initialize Empty State
        if: github.event.inputs.action == 'create' && hashFiles('terraform.tfstate') == ''
        run: |
          echo '{
            "version": 4,
            "terraform_version": "1.12.1",
            "serial": 1,
            "lineage": "'$(uuidgen)'",
            "outputs": {},
            "resources": [],
            "check_results": null
          }' > terraform.tfstate

      - name: Terraform Init
        id: init
        run: terraform init
        env:
          GITHUB_TOKEN: ${{ secrets.TF_GITHUB_TOKEN }}

      - name: Terraform Plan Create
        if: github.event.inputs.action == 'create'
        id: plan
        run: terraform plan -no-color -input=false
        env:
          GITHUB_TOKEN: ${{ secrets.TF_GITHUB_TOKEN }}
          TF_VAR_github_token: ${{ secrets.TF_GITHUB_TOKEN }}
          TF_VAR_github_owner: ${{ github.repository_owner }}

      - name: Terraform Plan Destroy
        if: github.event.inputs.action == 'destroy'
        id: plan-destroy
        run: terraform plan -destroy -no-color -input=false
        env:
          GITHUB_TOKEN: ${{ secrets.TF_GITHUB_TOKEN }}
          TF_VAR_github_token: ${{ secrets.TF_GITHUB_TOKEN }}
          TF_VAR_github_owner: ${{ github.repository_owner }}

      - name: Terraform Apply
        if: github.event.inputs.action == 'create'
        run: terraform apply -auto-approve -input=false
        env:
          GITHUB_TOKEN: ${{ secrets.TF_GITHUB_TOKEN }}
          TF_VAR_github_token: ${{ secrets.TF_GITHUB_TOKEN }}
          TF_VAR_github_owner: ${{ github.repository_owner }}

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: terraform destroy -auto-approve -input=false
        env:
          GITHUB_TOKEN: ${{ secrets.TF_GITHUB_TOKEN }}
          TF_VAR_github_token: ${{ secrets.TF_GITHUB_TOKEN }}
          TF_VAR_github_owner: ${{ github.repository_owner }}

      - name: Upload State
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-state
          path: terraform.tfstate
          retention-days: 90
          if-no-files-found: error

      - name: Update State Link
        if: success()
        run: |
          echo "run_id: ${{ github.run_id }}" > terraform.state.link
          echo "workflow_id: ${{ github.workflow }}" >> terraform.state.link
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add terraform.state.link
          git commit -m "Update terraform state location [skip ci]" || true
          git push

      - name: Force Unlock State
        if: github.event.inputs.action == 'force-unlock'
        run: |
          terraform init
          terraform force-unlock -force $(terraform state pull | jq -r '.serial')
        env:
          GITHUB_TOKEN: ${{ secrets.TF_GITHUB_TOKEN }}
          TF_VAR_github_token: ${{ secrets.TF_GITHUB_TOKEN }} 